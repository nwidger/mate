AC_INIT(maTe, 1.0, niels.widger@unh.edu, mate, http://cs.unh.edu)
AC_CONFIG_SRCDIR([src/mc/main.cc])
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(config.h)

AC_USE_SYSTEM_EXTENSIONS

AC_PROG_CC
AC_PROG_CXX

AC_LANG_C
AC_LANG_CPLUSPLUS

AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_C_CONST
AC_C_INLINE

AC_CHECK_FUNCS([ftruncate])
AC_CHECK_FUNCS([memset])
AC_CHECK_FUNCS([munmap])
AC_CHECK_FUNCS([sqrt])
AC_CHECK_FUNCS([strchr])
AC_CHECK_FUNCS([strdup])
AC_CHECK_FUNCS([strerror])
AC_CHECK_FUNCS([strspn])
AC_CHECK_FUNCS([strtol])
AC_CHECK_FUNCS([strtoull])
AC_CHECK_HEADERS([arpa/inet.h])
AC_CHECK_HEADERS([fcntl.h])
AC_CHECK_HEADERS([float.h])
AC_CHECK_HEADERS([inttypes.h])
AC_CHECK_HEADERS([libintl.h])
AC_CHECK_HEADERS([malloc.h])
AC_CHECK_HEADERS([netinet/in.h])
AC_CHECK_HEADERS([pthread.h])
AC_CHECK_HEADERS([stddef.h])
AC_CHECK_HEADERS([stdlib.h])
AC_CHECK_HEADERS([string.h])
AC_CHECK_HEADERS([sys/time.h])
AC_CHECK_HEADERS([unistd.h])
AC_FUNC_ALLOCA
AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_HEADER_STDBOOL
AC_HEADER_STDC
AC_PREREQ
AC_PROG_CXX
AC_PROG_LEX
AC_PROG_YACC
AC_SEARCH_LIBS(pthread_create, pthread)
AC_SEARCH_LIBS(tgetent, [readline, ncurses, termcap])
AC_SEARCH_LIBS(readline, readline)
AC_SEARCH_LIBS(clock_gettime, rt)
AC_SEARCH_LIBS(gettimeofday, rt)
AC_CHECK_LIB([m], [sqrtf])
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_SIZE_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T
AC_TYPE_INT16_T
AC_TYPE_INT8_T
AC_TYPE_UINT16_T

AC_ARG_ENABLE(optimize,
[  --enable-optimize  Set optimization level (0/1, default: 0)],
[case "${enableval}" in
  0) optimize=0 ;;
  1) optimize=1 ;;
  2) optimize=2 ;;
  3) optimize=3 ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-optimize) ;;
esac],[optimize=0])

AM_CONDITIONAL(OPTIMIZE1, test x$optimize == x1)
AM_CONDITIONAL(OPTIMIZE2, test x$optimize == x2)
AM_CONDITIONAL(OPTIMIZE3, test x$optimize == x3)

AC_ARG_ENABLE(debug,
[  --enable-debug     Enable debugging support (yes/no, default: yes)],
[case "${enableval}" in
  yes) debug=true ;;
  no)  debug=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac],[debug=true])
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

AC_ARG_ENABLE(profile,
[  --enable-profile     Enable profiling (yes/no, default: no)],
[case "${enableval}" in
  yes) profile=true ;;
  no)  profile=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-profile) ;;
esac],[profile=false])
AM_CONDITIONAL(PROFILE, test x$profile = xtrue)

AC_ARG_ENABLE(dmp,
[  --enable-dmp       Enable DMP support in mvm (yes/no, default: yes)],
[case "${enableval}" in
  yes) dmp=true ;;
  no)  dmp=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-dmp) ;;
esac],[dmp=true])
AM_CONDITIONAL(DMP, test x$dmp = xtrue)

AC_DEFINE([__STDC_LIMIT_MACROS], [1], [set __STDC_LIMIT_MACROS to 1])

AC_OUTPUT(Makefile src/mc/Makefile src/mas/Makefile src/mvm/Makefile)

